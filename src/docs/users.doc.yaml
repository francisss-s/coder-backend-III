components:
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
          description: The user's first name.
        last_name:
          type: string
          description: The user's last name.
        email:
          type: string
          format: email
          description: The user's email address.
        age:
          type: integer
          format: int32
          description: The user's age.
        password:
          type: string
          description: The user's password.
        role:
          type: string
          enum:
            - ADMIN
            - USER
          description: The user's role in the system (ADMIN or USER).
        cart:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
                format: uuid
                description: MongoDB ObjectId of the product.
              quantity:
                type: integer
          description: The user's shopping cart.
        verifyUser:
          type: boolean
          description: The user's verification status.
        verifyCode:
          type: string
          description: The user's verification code.
        resetToken:
          type: string
          description: The user's reset token.
        resetTokenExpires: 
          type: string
          format: date-time
          description: The user's reset token expiration date.
      example:
        first_name: John
        last_name: Doe
        email: john.doe@email.com
        age: 30
        password: password
        role: USER
        cart:
          - product: "60f6e1b3b3b3b3b3b3b3b3b3"
            quantity: 1
        verifyUser: false
        verifyCode: "123456"
        resetToken: "123456"
        resetTokenExpires: "2025-07-20T00:00:00.000Z"
paths:
  /api/users/register:
    post:
      summary: Registra un nuevo usuario.
      tags: [Auth]
      description: Crea un nuevo usuario en la base de datos y devuelve un token de sesión en una cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Usuario registrado y logueado exitosamente.
        400:
          description: Error en la validación de los datos.
  /api/users/login:
    post:
      summary: Inicia sesión de usuario.
      tags: [Auth]
      description: Autentica a un usuario y devuelve un token de sesión en una cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Usuario autenticado correctamente.
        401:
          description: Credenciales incorrectas.
  /api/users/signout:
    post:
      summary: Cierra sesión de usuario.
      tags: [Auth]
      description: Elimina la cookie de sesión del usuario.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Usuario deslogueado correctamente.
  /api/users/current:
    post:
      summary: Verifica el estado de la sesión del usuario.
      tags: [Auth]
      description: Retorna información sobre si el usuario está en línea o fuera de línea.
      responses:
        200:
          description: Estado de la sesión del usuario.
  /api/users/verify:
    get:
      summary: Verifica la cuenta de un usuario.
      tags: [Auth]
      description: Activa una cuenta de usuario mediante un código de verificación.
      parameters:
        - name: token
          in: query
          required: true
          description: Token de verificación enviado por correo electrónico.
          schema:
            type: string
      responses:
        200:
          description: Cuenta verificada correctamente.
        400:
          description: Token inválido o expirado
  /api/users/forgot:
    post:
      summary: Solicita un enlace para restablecer la contraseña.
      tags: [Auth]
      description: Envía un correo con un enlace para restablecer la contraseña de usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@example.com
      responses:
        200:
          description: Enlace de restablecimiento enviado.
        404:
          description: Usuario no encontrado.
  /api/users/reset:
    put:
      summary: Restablece la contraseña de usuario.
      tags: [Auth]
      description: Permite al usuario cambiar su contraseña mediante un token de restablecimiento.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token de restablecimiento recibido por correo.
                  example: abc123xyz
                newPassword:
                  type: string
                  description: Nueva contraseña elegida por el usuario.
                  example: newSecurePass456
      responses:
        200:
          description: Contraseña restablecida correctamente.
        400:
          description: Token inválido o expirado.